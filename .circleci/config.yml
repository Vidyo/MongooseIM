version: 2.1

filters: &all_tags
  tags:
    only: /^\d+\.\d+\.\d+([a-z0-9\-\+])*/

commands:
  fetch_packages:
    steps:
    - run:
        name: Install basic packages
        command: |
          sudo killall -9 apt-get || true && \
          echo "Acquire::ForceIPv4 'true';" | sudo tee -a /etc/apt/apt.conf.d/99force-ipv4 && \
          sudo apt-get update && \
          sudo apt-get install libssl-dev unixodbc-dev unixodbc tdsodbc rsync -y

jobs:
  build:
    docker:
      - image: cimg/elixir:1.11
    parallelism: 1
    parameters:
      build_prod:
        type: boolean
        default: false
    working_directory: ~/app
    environment:
      SKIP_RELEASE: 1
      SKIP_COV: 0
    steps:
      - checkout
      - fetch_packages
      - run:
          name: Prepare for cache
          command: echo $ERLANG_VERSION > otp_version
      - restore_cache:
          name: Maybe restore whole build
          key: build-cache-{{ .Branch }}-{{ .Revision }}--{{ checksum "otp_version" }}
      - restore_cache:
          name: Maybe restore all rebar3 dependencies
          key: deps-cache--{{ checksum "rebar.lock" }}--{{ checksum "big_tests/rebar.lock" }}--{{ checksum "otp_version" }}
      - run:
          name: Get deps
          command: |
            tools/configure with-all
            ./rebar3 get-deps
      - save_cache:
          name: Cache downloaded and built dependencies
          key: deps-cache--{{ checksum "rebar.lock" }}--{{ checksum "big_tests/rebar.lock" }}--{{ checksum "otp_version" }}
          paths:
            - ~/.cache/rebar3
            - ./_build/default/
      - run: ./rebar3 compile
      - run: make certs
      - run:
          name: Generate development releases
          command: ./tools/build-releases.sh
      - run:
          name: Generate prod release
          command: if [ <<parameters.build_prod>> ]; then make rel; fi
      - run:
          name: Build Big Tests
          command: tools/travis-build-tests.sh
      - save_cache:
          key: build-cache-{{ .Branch }}-{{ .Revision }}--{{ checksum "otp_version" }}
          paths: ./

  small_tests:
    docker:
      - image: cimg/elixir:1.11
    parallelism: 1
    working_directory: ~/app
    environment:
      PRESET: small_tests
    steps:
      - checkout
      - run:
          name: Prepare for cache
          command: echo $ERLANG_VERSION > otp_version
      - restore_cache:
          key: build-cache-{{ .Branch }}-{{ .Revision }}--{{ checksum "otp_version" }}
      - restore_cache:
          key: deps-cache--{{ checksum "rebar.lock" }}--{{ checksum "big_tests/rebar.lock" }}--{{ checksum "otp_version" }}
      - run:
          name: Run Small Tests
          command: |
            SKIP_AUTO_COMPILE=true KEEP_COVER_RUNNING=1 ./tools/travis-test.sh -p small_tests -s true -e true
      - run:
          name: Coverage
          when: on_success
          command: |
            echo "Success!"
            pip3 install codecov && codecov
            ./rebar3 codecov analyze
            codecov --disable=gcov --env PRESET
      - run:
          name: Upload results
          when: always
          command: |
              tools/circleci-prepare-log-dir.sh
              if [ -n "${AWS_SECRET_ACCESS_KEY}" ]; then tools/circleci-upload-to-s3.sh; fi

  dialyzer:
    docker:
      - image: cimg/elixir:1.11
    parallelism: 1
    working_directory: ~/app
    steps:
      - checkout
      - run:
          name: Run Dialyzer
          command: |
            SKIP_AUTO_COMPILE=true KEEP_COVER_RUNNING=1 ./tools/travis-test.sh -p dialyzer_only -s false

  big_tests:
    docker:
      - image: cimg/elixir:1.11
    parallelism: 1
    working_directory: ~/app
    parameters:
      preset:
        type: enum
        enum: [internal_mnesia, mysql_redis, odbc_mssql_mnesia, ldap_mnesia,
               elasticsearch_and_cassandra_mnesia, pgsql_mnesia, riak_mnesia]
        description: Preset to run
        default: internal_mnesia
      db:
        type: string
        description: Database to use
        default: mnesia
      tls_dist:
        type: boolean
        description: Erlang distribution with TLS enabled
        default: false
    environment:
      PRESET: <<parameters.preset>>
      DB: <<parameters.db>>
      TLS_DIST: <<parameters.tls_dist>>
      ELASTICSEARCH_VERSION: 5.6.9
      CASSANDRA_VERSION: 3.9
      TEST_SPEC: mam.spec
      REDIS_VERSION: 3.2.10
    steps:
      - checkout
      - run:
          name: Prepare for cache
          command: echo $ERLANG_VERSION > otp_version
      - restore_cache:
          key: build-cache-{{ .Branch }}-{{ .Revision }}--{{ checksum "otp_version" }}
      - restore_cache:
          key: deps-cache--{{ checksum "rebar.lock" }}--{{ checksum "big_tests/rebar.lock" }}--{{ checksum "otp_version" }}
      - run:
          name: Setup database
          command: |
            tools/travis-setup-db.sh
            if [ $PRESET = ldap_mnesia ]; then sudo tools/travis-setup-ldap.sh; fi
            sudo tools/travis-setup-rmq.sh; tools/setup-redis.sh
            echo '127.0.0.1 muc.localhost' | sudo tee -a /etc/hosts
      - run:
          name: Run Big Tests
          command: |
            SKIP_AUTO_COMPILE=true KEEP_COVER_RUNNING=1 ./tools/travis-test.sh -p $PRESET -s false
          no_output_timeout: 40m
      - run:
          name: Coverage
          when: on_success
          command: |
            echo "Success!"
            pip3 install codecov && codecov
            ./rebar3 codecov analyze
            codecov --disable=gcov --env PRESET
      - run:
          name: Build Failed - Logs
          when: on_fail
          command: |
            echo "Failure!"
            if [ -s _build/mim1/rel/mongooseim/log/crash.log ]; then cat _build/mim1/rel/mongooseim/log/crash.log; fi
            tail -100 _build/mim1/rel/mongooseim/log/mongooseim.log.1
      - run:
          name: Upload results
          when: always
          command: |
              tools/circleci-prepare-log-dir.sh
              if [ -n "${AWS_SECRET_ACCESS_KEY}" ]; then tools/circleci-upload-to-s3.sh; fi

  docker_image:
    parallelism: 1
    machine:
      image: ubuntu-2004:202010-01
    working_directory: ~/app
    steps:
      - checkout
      - run:
          name: Prepare for cache
          command: |
            echo $ERLANG_VERSION > otp_version
      - restore_cache:
          keys:
            - build-cache-{{ .Branch }}-{{ .Revision }}--{{ checksum "otp_version" }}
      - restore_cache:
          keys:
            - deps-cache--{{ checksum "rebar.lock" }}--{{ checksum "big_tests/rebar.lock" }}--{{ checksum "otp_version" }}
      - run:
          name: Execute Docker image build and upload
          command: tools/circle-build-and-push-docker.sh

workflows:
  version: 2
  build_and_test:
    jobs:
      # ============= BASE BUILDS =============
      - build:
          name: otp_23
          build_prod: true
      # ============= SMALL TESTS =============
      - small_tests:
          name: small_tests_23
          requires:
            - otp_23
      # ============= MOST RECENT VERSION TESTS =============
      - big_tests:
          name: internal_mnesia
          preset: internal_mnesia
          db: "mnesia"
          tls_dist: true
          requires:
            - otp_23
      # ============= DOCKER IMAGE BUILD & UPLOAD =============
      - docker_image:
          name: docker_build_and_ship
          requires:
            - internal_mnesia
            - small_tests_23
